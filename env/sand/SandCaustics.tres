[gd_resource type="ShaderMaterial" load_steps=6 format=2]

[ext_resource path="res://polyhaven/aerial_beach_01_1k.gltf/textures/aerial_beach_01_diff_1k.jpg" type="Texture" id=1]
[ext_resource path="res://polyhaven/aerial_beach_01_1k.gltf/textures/aerial_beach_01_rough_1k.jpg" type="Texture" id=2]
[ext_resource path="res://polyhaven/aerial_beach_01_1k.gltf/textures/aerial_beach_01_nor_gl_1k.jpg" type="Texture" id=3]
[ext_resource path="res://opengameart/Caustics/frames/caust_001.png" type="Texture" id=4]

[sub_resource type="Shader" id=1]
code = "// NOTE: Shader automatically converted from Godot Engine 3.4.2.stable's SpatialMaterial.

shader_type spatial;
render_mode blend_mix,depth_draw_opaque,cull_disabled,diffuse_burley,specular_schlick_ggx;
uniform vec4 albedo : hint_color;
uniform sampler2D texture_albedo : hint_albedo;
uniform float specular;
uniform float metallic;
uniform float roughness : hint_range(0,1);
uniform float point_size : hint_range(0,128);
uniform sampler2D texture_roughness : hint_white;
uniform vec4 roughness_texture_channel;
uniform sampler2D texture_emission : hint_black_albedo;
uniform vec4 emission : hint_color;
uniform float emission_energy;
uniform sampler2D texture_normal : hint_normal;
uniform float normal_scale : hint_range(-16,16);
varying vec3 uv1_triplanar_pos;
uniform float uv1_blend_sharpness;
varying vec3 uv1_power_normal;
uniform vec3 uv1_scale;
uniform vec3 uv1_offset;
uniform vec3 uv2_scale;
uniform vec3 uv2_offset;


void vertex() {
	TANGENT = vec3(0.0,0.0,-1.0) * abs(NORMAL.x);
	TANGENT+= vec3(1.0,0.0,0.0) * abs(NORMAL.y);
	TANGENT+= vec3(1.0,0.0,0.0) * abs(NORMAL.z);
	TANGENT = normalize(TANGENT);
	BINORMAL = vec3(0.0,1.0,0.0) * abs(NORMAL.x);
	BINORMAL+= vec3(0.0,0.0,-1.0) * abs(NORMAL.y);
	BINORMAL+= vec3(0.0,1.0,0.0) * abs(NORMAL.z);
	BINORMAL = normalize(BINORMAL);
	uv1_power_normal=pow(abs(NORMAL),vec3(uv1_blend_sharpness));
	uv1_power_normal/=dot(uv1_power_normal,vec3(1.0));
	uv1_triplanar_pos = VERTEX * uv1_scale + uv1_offset;
	uv1_triplanar_pos *= vec3(1.0,-1.0, 1.0);
}


vec4 triplanar_texture(sampler2D p_sampler,vec3 p_weights,vec3 p_triplanar_pos) {
	vec4 samp=vec4(0.0);
	samp+= texture(p_sampler,p_triplanar_pos.xy) * p_weights.z;
	samp+= texture(p_sampler,p_triplanar_pos.xz) * p_weights.y;
	samp+= texture(p_sampler,p_triplanar_pos.zy * vec2(-1.0,1.0)) * p_weights.x;
	return samp;
}


void fragment() {
	vec4 albedo_tex = triplanar_texture(texture_albedo,uv1_power_normal,uv1_triplanar_pos);
	albedo_tex *= COLOR;
	ALBEDO = albedo.rgb * albedo_tex.rgb;
	METALLIC = metallic;
	float roughness_tex = dot(triplanar_texture(texture_roughness,uv1_power_normal,uv1_triplanar_pos),roughness_texture_channel);
	ROUGHNESS = roughness_tex * roughness;
	SPECULAR = specular;
	NORMALMAP = triplanar_texture(texture_normal,uv1_power_normal,uv1_triplanar_pos).rgb;
	NORMALMAP_DEPTH = normal_scale;
	
	float emit_dir_power = uv1_power_normal.y;
	
	vec3 uv_c_src = uv1_triplanar_pos * 0.25;
	
	vec3 uv_c1 = uv_c_src + vec3(TIME * 0.05, TIME * 0.02, TIME * 0.08);
	vec3 uv_c2 = uv_c_src + vec3(TIME * -0.08 + 3.0, TIME * 0.03, TIME * 0.01);
	
	uv_c1 += 0.5 * sin(uv_c1);
	uv_c2 += 0.3 * cos(uv_c2);
	
	
	vec3 emission_tex_1 = triplanar_texture(texture_emission,uv1_power_normal,uv_c1).rgb;
	vec3 emission_tex_2 = triplanar_texture(texture_emission,uv1_power_normal,uv_c2).rgb;
	
	//float mix_amount = clamp(sin(10.0 * uv_c1.x) + sin(10.0 * uv_c2.z), -1.0, 1.0);
	
	emission_tex_1 = mix(emission_tex_1, emission_tex_2, 0.5);
	EMISSION = (emission.rgb+emission_tex_1)*emission_energy * emit_dir_power;
}
"

[resource]
resource_name = "Sand"
shader = SubResource( 1 )
shader_param/albedo = Color( 1.2, 1.2, 1.2, 1 )
shader_param/specular = 0.5
shader_param/metallic = 0.0
shader_param/roughness = 1.0
shader_param/point_size = 1.0
shader_param/roughness_texture_channel = Plane( 1, 0, 0, 0 )
shader_param/emission = Color( 0, 0, 0, 1 )
shader_param/emission_energy = 0.43
shader_param/normal_scale = 0.2
shader_param/uv1_blend_sharpness = 1.0
shader_param/uv1_scale = Vector3( 0.2, 0.2, 0.2 )
shader_param/uv1_offset = Vector3( 0, 0, 0 )
shader_param/uv2_scale = Vector3( 1, 1, 1 )
shader_param/uv2_offset = Vector3( 0, 0, 0 )
shader_param/texture_albedo = ExtResource( 1 )
shader_param/texture_roughness = ExtResource( 2 )
shader_param/texture_emission = ExtResource( 4 )
shader_param/texture_normal = ExtResource( 3 )
